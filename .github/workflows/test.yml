name: Tests
on:
  - merge_group
  - push
  - pull_request

# Only build for latest push/PR unless it's main or release/
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' && !startsWith( github.ref, 'refs/heads/release/' ) && !startsWith( github.ref, 'refs/heads/gh-readonly-queue/' ) }}

permissions: {}

defaults:
  run:
    shell: bash

env:
  POETRY_VERSION: 2.1.3

jobs:
  # Run `make test` against all components but client, which is special
  component:
    strategy:
      fail-fast: false
      matrix:
        # qubesdb-tools has no test suite because it can only usefully be tested
        # in `securedrop-workstation`'s CI.
        component:
          - export
          - keyring
          - log
          - proxy
        debian_version:
          - bookworm
    runs-on: ubuntu-latest
    container: debian:${{ matrix.debian_version }}
    steps:
      - run: |
          apt-get update && apt-get install --yes git make gnupg sudo pipx
          PIPX_HOME=/opt PIPX_BIN_DIR=/usr/local/bin/ pipx install poetry==$POETRY_VERSION
      - name: Setup user
        run: |
          # We want to run tests as a regular user, similar to Qubes VMs
          useradd --create-home --shell /bin/bash user
      - name: Install Rust-specific dependencies
        run: apt-get install --yes build-essential curl libssl-dev pkg-config
        if: ${{ matrix.component == 'proxy' }}
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
      # Install Rust, keep in sync with rust-toolchain.toml
      - uses: dtolnay/rust-toolchain@1.87.0
        if: ${{ matrix.component == 'proxy' }}
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ matrix.component }}-${{ hashFiles('/etc/os-release', format('{0}/poetry.lock', matrix.component)) }}
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        if: ${{ matrix.component == 'proxy' }}
        with:
          path: ~/.cargo
          key: cargo-proxy-${{ hashFiles('/etc/os-release', 'Cargo.lock') }}
      - name: Install dependencies
        run: |
          if [[ "${{ matrix.component }}" == "export" ]]; then
            make -C ${{ matrix.component }} ci-install-deps
            sudo -u user poetry config virtualenvs.options.system-site-packages true
          fi
          sudo -u user poetry -C ${{ matrix.component }} install
      - name: Run test
        run: |
          sudo chown -R user:user .
          sudo -u user PATH=$PATH:$HOME/.cargo/bin make -C ${{ matrix.component }} test

  # Run the various `make test-...` commands for the client.
  # TODO: these should be consolidated into one when feasible
  client:
    strategy:
      fail-fast: false
      matrix:
        command:
          - test-functional
          - test-integration
          - test-random
        debian_version:
          - bookworm
    runs-on: ubuntu-latest
    container: debian:${{ matrix.debian_version }}
    steps:
      - run: |
          apt-get update && apt-get install --yes git make gnupg sudo pipx
          PIPX_HOME=/opt PIPX_BIN_DIR=/usr/local/bin/ pipx install poetry==$POETRY_VERSION
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Setup user
        run: |
          # We want to run tests as a regular user, similar to Qubes VMs
          useradd --create-home --shell /bin/bash user
          sudo -u user bash -c "mkdir ~/Downloads"
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-client-${{ hashFiles('/etc/os-release', 'client/poetry.lock') }}
      - name: Install dependencies
        run: |
          make -C client ci-install-deps
          sudo -u user poetry -C client install
      - name: Run test
        run: |
          sudo chown -R user:user .
          sudo -u user make -C client ${{ matrix.command }}

  # Run the client i18n/l10n checks.
  internationalization:
    strategy:
      matrix:
        debian_version:
          - bookworm
    runs-on: ubuntu-latest
    container: debian:${{ matrix.debian_version }}
    steps:
      - run: |
          apt-get update && apt-get install --yes git make pipx
          pipx install poetry==$POETRY_VERSION
          pipx ensurepath
          echo "${HOME}/.local/bin" >> ${GITHUB_PATH}
      - uses: actions/checkout@v5
        with:
          persist-credentials: false
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-client-${{ hashFiles('/etc/os-release', 'client/poetry.lock') }}
      - name: Install dependencies
        run: |
          poetry -C client install
          make -C client ci-install-deps
          git config --global --add safe.directory '*'
      - name: Check that source strings are updated
        run: make -C client check-strings
      - name: Check that translation machine objects are reproducible
        run: make -C client verify-mo
