rules:

- id: tarfile-extractall-traversal
  languages:
    - python
  severity: ERROR
  message: Possible path traversal through tarfile.open($PATH).extractall() if the source tar is controlled by an attacker.
  patterns:
    - pattern: "....extractall(...)"
    - pattern-not-inside: |
        def safe_extractall(...):
            ...

- id: tarfile-extract-traversal
  languages:
    - python
  severity: ERROR
  message: Possible path traversal through tarfile.open($PATH).extract() if the source tar is controlled by an attacker.
  patterns:
    - pattern: "....extract(...)"

- id: gzip-extract-traversal
  languages:
    - python
  severity: ERROR
  message: Possible path traversal through gzip.open if the source zip file is controlled by an attacker.
  patterns:
    - pattern: |
        with gzip.open(...) as $IN, open(...) as $OUT:
            ...
            copyfileobj(...)

- id: gzip-open-insecure
  languages:
    - python
  severity: ERROR
  message: Possible path traversal through gzip.open if the source zip file is controlled by an attacker.
  patterns:
    - pattern: |
        with gzip.open(...) as $IN, open(...) as $OUT:
            ...
    - pattern-not-inside: |
        def safe_gzip_extract(...):
            ...

- id: mkdir-insecure
  languages:
    - python
  severity: ERROR
  message: Possible path traversal or insecure directory and file permissions through os.mkdir(). Use securedrop_client.utils.safe_mkdir instead.
  patterns:
    - pattern: "....mkdir(...)"
    - pattern-not-inside: |
        def safe_mkdir(...):
            ...

- id: makedirs-insecure
  languages:
    - python
  severity: ERROR
  message: Possible path traversal or insecure directory and file permissions through os.makedirs(). Use securedrop_client.utils.safe_mkdir instead.
  patterns:
    - pattern: "....makedirs(...)"
    - pattern-not-inside: |
        def safe_mkdir(...):
            ...

- id: copy-insecure
  languages:
    - python
  severity: ERROR
  message: Possible path traversal or insecure directory and file permissions through shutil.copy(). Use securedrop_client.utils.safe_copy instead.
  patterns:
    - pattern: "....shutil.copy(...)"
    - pattern-not-inside: |
        def safe_copy(...):
            ...

- id: copyfileobj-insecure
  languages:
    - python
  severity: ERROR
  message: Possible path traversal or insecure directory and file permissions through shutil.copyfileobj(). Use securedrop_client.utils.safe_copyfileobj instead.
  patterns:
    - pattern: "....shutil.copyfileobj(...)"
    - pattern-not-inside: |
        def safe_copyfileobj(...):
            ...

- id: move-insecure
  languages:
    - python
  severity: ERROR
  message: Possible path traversal or insecure directory and file permissions through shutil.move(). Use securedrop_client.utils.safe_move instead.
  patterns:
    - pattern: "....shutil.move(...)"
    - pattern-not-inside: |
        def safe_move(...):
            ...

- id: untranslated-gui-string
  languages:
    - python
  severity: ERROR
  message: Untranslated GUI string
  patterns:

    # Exempt empty strings from translation:
    - pattern-not-regex: |
        \(""\)

    # Specific cases to check:
    - pattern-either:

        # Check direct invocations of Qt-widget constructors:
        - pattern-regex: |
            Q(?:Action|Label|PushButton)\(\s*f?".*

        # Check setText() calls:
        - pattern-regex: |
            setText\(\s*f?".*

        # Check Qt-level (as opposed to logged) errors:
        - pattern-regex: |
            self\.error\(\s*f?".*

        # Check errors passed up to the GUI:
        - pattern-regex: |
            self\.gui\.update_error_status\(\s*f?".*

        # Check constructors for subclassed Qt widgets:
        - patterns:
            - pattern-either:
              - pattern-inside: |
                  class $X(QAction):
                    ...
                    def __init__(...):
                      ...
                      super().__init__(...)
                      ...
              - pattern-inside: |
                  class $X(QLabel):
                    ...
                    def __init__(...):
                      ...
                      super().__init__(...)
                      ...
              - pattern-inside: |
                  class $X(QPushButton):
                    ...
                    def __init__(...):
                      ...
                      super().__init__(...)
                      ...
            - pattern-regex: |
                super\(\).__init__\(\s*f?".*

- id: format-before-gettext
  languages:
    - python
  severity: WARNING
  message: String formatted before gettext
  patterns:
    - pattern-either:
        - pattern-regex: |-
            _\(\s*".*"\s*\.format\(
        - pattern-regex: |-
            _\(\s*f"(.*)

- id: unsafe-assert
  languages:
    - python
  severity: ERROR
  message: Assert is unsafe unless used for type narrowing - see https://mypy.readthedocs.io/en/stable/type_narrowing.html
  patterns:
    # Exempt assertions that are used for type narrowing
    - pattern-not-regex: |
        assert isinstance\(.*\)

    # Forbid any other use of assert
    - pattern-regex: |
        assert.*
